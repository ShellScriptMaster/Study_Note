正则表达式
    常用元字符
        .               --> 匹配任意单个字符
        \w              --> 匹配字母或数字或下划线或汉字
        \s              --> 匹配空格符
        \d              --> 匹配数字
        \b              --> 匹配单词边界
        ^               --> 匹配行首
        $               --> 匹配行末
    常用反义字符
        \W              --> 匹配任意不是字母或数字或下划线或汉字的字符
        \S              --> 匹配任意不是空格的字符
        \D              --> 匹配任意非数字
        \B              --> 匹配不是单词边界的位置
        [^abc]          --> 匹配不是abc的字符
    限定字符
        *               --> 重复任意次数
        +               --> 重复至少一次
        ?               --> 重复零次或一次
        {n}             --> 重复n次
        {n,}            --> 重复n次或更多次
        {n,m}           --> 重复n次到m次
    转义字符
        \               --> 将元字符还原成本来的含义
    字符分枝
        a|b             --> 标识a或b
    字符分组
        ()              --> 将括号内视为一个整体
            匹配ip地址格式
                ((25[0-5]|2[0-4][0-9]|[0-1]\d\d)\.){3}(25[0-5]|2[0-4][0-9]|[0-1]\d\d)
    捕获
        (exp)           --> 匹配exp,并捕获文本到自动命名的组里
        (?<name>exp)    --> 匹配exp,并捕获文本到名称为name的组里,也可以写成(?'name'exp)
        (?:exp)         --> 匹配exp,不捕获匹配的文本,也不给此分组分配组号
    零宽断言
    有时候需要查找某些匹配之前或之后的东西，这个时候就需要用到们像\b,^,$那样用于指定一个位置，这个位置应该满足一定的条件(即断言)，因此它们也被称为零宽断言
     (?=exp)也叫零宽度正预测先行断言，它断言自身出现的位置的后面能匹配表达式exp。比如\b\w+(?=ing\b)，匹配以ing结尾的单词的前面部分(除了ing以外的部分)，如查找I'm singing while you're dancing.时，它会匹配sing和danc
     (?<=exp)也叫零宽度正回顾后发断言，它断言自身出现的位置的前面能匹配表达式exp。比如(?<=\bre)\w+\b会匹配以re开头的单词的后半部分(除了re以外的部分)，例如在查找reading a book时，它匹配ading
        (?=exp)         --> 匹配exp前的位置
        (?<=exp)        --> 匹配exp后面的位置
        (?!exp)         --> 匹配后面跟的不是exp的位置
        (?<!exp)        --> 匹配前面不是exp的位置
    注释
        (?#comment)     --> 这种类型的分组不对正则表达式的处理产生任何影响,仅用于提供注释让人阅读
    贪婪匹配
       正则表达式中包含重复的限定符,通常匹配尽可能多的字符
    懒惰匹配
        匹配尽可能少的字符
        example:
            使用 a.*b 去匹配 aabab
            一般情况下会尽量匹配尽可能多的字符, 此时出来结果是 aabab, 使用懒惰匹配出来的则是ab(取尽可能少的字符)
        懒惰限定符:
            *?          --> 重复任意次但尽可能少重复
            +?          --> 重复至少一次但尽可能少重复
            ??          --> 重复1或0次但尽可能少重复
            {n,m}?      --> 重复n到m次但尽可能少重复
            {n,}?       --> 重复至少n次但尽可能少重复
    后向引用
        后向引用用于重复搜索前面某个分组匹配的文本
        \b(\w+)\b\s+\1\b                --> \b边界 \w+多个字母 \b边界 \s+多个空格符 \1分组内容(第一个分组叫1) \b边界
        指定分组名称
        \b(?<word>\w+)\b\s+\k<word>\b   --> \b边界 (?<word>\w+)多个字母分组为word \b边界 \s+多个空格符 \k<word>引用分组内容 \b边界

    其他语法
        \a              --> 报警字符, 打印后电脑嘀一声
        \b              --> 通常是单词分界位置，但如果在字符类里使用代表退格
        \t              --> 制表符 tab
        \r              --> 回车
        \v              --> 竖向制表符
        \f              --> 换页符
        \n              --> 换行符
        \e              --> Escape
        \0nn            --> ASCII码八进制代码为nn字符
        \xnn            --> ASCII码十六进制代码为nn字符
        \cN             --> ASCII控制字符,如\cC代表Ctrl+C
        \unaa           --> Unicode码中十六进制代码为aa字符
        \A              --> 字符串开头类似^(不受处理多行选项的影响)
        \Z              --> 字符串结尾或行尾(不受处理多行选项的影响)
        \z              --> 字符串结尾类似$(不受处理多行选项的影响)
        \G              --> 当前搜索的开头
        \p{name}        --> Unicode中命名为name的字符类，例如\p{IsGreek}
        (?>exp)         --> 贪婪子表达式
        (?<x>-<y>exp)   --> 平衡组
        (?im-nsx:exp)   --> 在子表达式exp中改变处理选项
        (?im-nsx)       --> 为表达式后面部分改变处理选项
        (?(exp)yes|no)  --> 把exp当作零宽正向先行断言,如果在这个位置能匹配,使用yes作为此组的表达式;否则使用no
        (?(exp)yes)     --> 同上,只是使用空表达式作为no
        (?<name>yes|no) --> 如果命名组捕获了内容,使用yes作为表达式否则no
        (?<name>yes)    --> 同上,只是使用空表达式作为no











